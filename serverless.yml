service: acorn-slack-bot

frameworkVersion: "3"

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30

  environment:
    NODE_ENV: ${self:provider.stage}
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN, ''}
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET, ''}
    SLACK_APP_TOKEN: ${env:SLACK_APP_TOKEN, ''}
    BEDROCK_MODEL_ID: ${env:BEDROCK_MODEL_ID, 'anthropic.claude-3-sonnet-20240229-v1:0'}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
          Resource: "arn:aws:bedrock:${self:provider.region}::foundation-model/*"

custom:
  serverless-offline:
    httpPort: 3000
  dotenv:
    path: .env.${self:provider.stage}
    fallback: .env

functions:
  # Health check endpoint
  health:
    handler: src/handlers/healthHandler.handler
    events:
      - httpApi:
          path: /health
          method: get

  # Slack bot communication endpoint
  slackBot:
    handler: src/handlers/slackEventsHandler.handler
    events:
      - httpApi:
          path: /slack/events
          method: post

package:
  patterns:
    - "!src/**"
    - "dist/**"
